name: reusable copy to s3
on:
  workflow_call:
    inputs:
      aws-region:
        type: string
        default: ap-southeast-2
        required: false
        description: |
          the AWS region to use; e.g ap-southeast-2
      aws-role-arn-to-assume:
        type: string
        required: true
        description: |
          an AWS role ARN to assume.
          e.g: arn:aws:iam::ACCOUNT_ID:role/github-actions-ROLE_NAME
      aws-role-duration-seconds:
        type: string
        required: false
        default: 3600
        description: |
          the number of seconds to hold a session open for.
      aws-role-session-name:
        type: string
        required: false
        description: |
          the name of the session to use for AssumeRole(WithWebIdentity)
      cp-or-sync:
        type: string
        default: sync
        required: false
        description: |
          the command to use, whether cp (copy) or sync
      single-file:
        type: boolean
        default: false
        required: false
        description: |
          single file copy (only for `cp`, no effect for `sync`)
      direction:
        type: string
        default: to
        required: true
        description: |
          the direction to copy, whether from or to
      artifact-name:
        type: string
        required: true
        description: |
          the name of the GitHub Actions artifact to download
      artifact-path:
        type: string
        required: true
        description: |
          the path in the GitHub Actions artifact to download
      s3-bucket:
        type: string
        required: true
        description: |
          the AWS S3 bucket URI to use
jobs:
  copy-to-s3:
    runs-on: ubuntu-latest
    steps:
      - if: ${{ startsWith(github.repository, 'GeoNet/') == false }}
        name: require GeoNet org
        run: |
          exit 1
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: get session name
        id: get-session-name
        env:
          AWS_ROLE_SESSION_NAME: ${{ inputs.aws-role-session-name }}
        run: |
          SESSION_NAME=""  
          if [ -n "$AWS_ROLE_SESSION_NAME" ]; then
              SESSION_NAME="$AWS_ROLE_SESSION_NAME"
          fi
          echo "session-name=$SESSION_NAME" >> $GITHUB_OUTPUT
      - name: validate
        env:
          CP_OR_SYNC: ${{ inputs.cp-or-sync }}
          DIRECTION: ${{ inputs.direction }}
        run: |
          ERRORS=false
          if ! echo "$CP_OR_SYNC" | grep -q -E '^(cp|sync)$'; then
            echo "error: command must be either 'cp' or 'sync'" >/dev/stderr
            ERRORS=true
          fi
          if ! echo "$DIRECTION" | grep -q -E '^(from|to)$'; then
            echo "error: command must be either 'from' or 'to'" >/dev/stderr
            ERRORS=true
          fi
          if [ "$ERRORS" = true ]; then
            exit 1
          fi
      - name: Copy to S3
        uses: GeoNet/Actions/.github/actions/copy-to-s3@caS3
        if: ${{ inputs.direction == 'to' }}
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-role-arn-to-assume: ${{ inputs.aws-role-arn-to-assume }}
          aws-role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
          aws-role-session-name: ${{ steps.get-session-name.outputs.session-name }}
          use-sync: ${{ inputs.cp-or-sync == 'sync' }}
          single-file: ${{ inputs.single-file }}
          artifact-name: ${{ inputs.artifact-name }}
          artifact-path: ${{ inputs.artifact-path }}
          s3-bucket-uri: ${{ inputs.s3-bucket }}
      - name: Copy from S3
        uses: GeoNet/Actions/.github/actions/copy-from-s3@caS3
        if: ${{ inputs.direction == 'from' }}
        with:
          aws-region: ${{ inputs.aws-region }}
          aws-role-arn-to-assume: ${{ inputs.aws-role-arn-to-assume }}
          aws-role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
          aws-role-session-name: ${{ steps.get-session-name.outputs.session-name }}
          use-sync: ${{ inputs.cp-or-sync == 'sync' }}
          single-file: ${{ inputs.single-file }}
          artifact-name: ${{ inputs.artifact-name }}
          artifact-path: ${{ inputs.artifact-path }}
          s3-bucket-uri: ${{ inputs.s3-bucket }}
