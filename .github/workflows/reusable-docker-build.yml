name: Reusable Docker build
on:
  workflow_call:
    inputs:
      context:
        required: true
        type: string
        default: .
        description: |
          path to image source.
      imageName:
        required: true
        type: string
        description: |
          the short name for image builds.
          e.g: nginx
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      dockerfile:
        required: true
        type: string
        default: ./Dockerfile
        description: |
          path to the image dockerfile.
      tag:
        required: false
        type: string
        default: latest
        description: |
          the tag to set image as.
      buildArgs:
        required: false
        type: string
        description: |
          a comma separated list of build args.
          e.g: THING1=a,THING2=b
      platforms:
        required: false
        type: string
        default: 'linux/amd64'
        description: |
          comma-separated list of platforms to build with.
          e.g: linux/amd64,linux/arm64
      push:
        required: false
        type: boolean
        default: false
        description: |
          set to true to push an image to a registry. When set to false, it will build and exit
    outputs:
      images:
        value: ${{ jobs.build.outputs.images }}
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      images: ${{ steps.image.outputs.image }}
    steps:
      - uses: GeoNet/yq@bbe305500687a5fe8498d74883c17f0f06431ac4 # master
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
          check-latest: true
      - uses: sigstore/cosign-installer@dd6b2e2b610a11fd73dd187a43d57cc1394e35f9 # v3.0.5
      - uses: GeoNet/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # main
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6a58db7e0d21ca03e6c44877909e80e45217eed2 # v2.6.0
      - name: Login to quay.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        env:
          quay-robot-token: ${{ secrets.QUAY_ROBOT_TOKEN }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
        if: ${{ env.quay-robot-token != null && env.quay-username != null }}
        with:
          # TODO use Quay.io https://github.com/docker/login-action#quayio
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: Login to ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          # TODO use Quay.io https://github.com/docker/login-action#quayio
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: run-info
        name: collect job run info
        env:
          GHCR_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          TAG="${{ inputs.tag }}"
          TAG="${TAG:-latest}"
          if [ -n "${{ inputs.registryOverride }}" ]; then
            echo "image-with-tag=${{ inputs.registryOverride }}/${{ inputs.imageName }}:$TAG" >> $GITHUB_OUTPUT
          else
            echo "image-with-tag=${GHCR_DOCKER_REPO,,}/${{ inputs.imageName }}:$TAG" >> $GITHUB_OUTPUT
          fi
      - name: Build and push
        uses: docker/build-push-action@44ea916f6c540f9302d50c2b1e5a8dc071f15cdf # v4.1.0
        id: build
        with:
          push: ${{ inputs.push }}
          tags: ${{ steps.run-info.outputs.image-with-tag }}
          context: ${{ inputs.context }}
          platforms: ${{ inputs.platforms }}
          file: ${{ inputs.dockerfile }}
          build-args: ${{ inputs.buildArgs }}
          labels: |
            org.opencontainers.image.name=${{ inputs.imageName }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
      - name: get-digests
        id: get-digests
        if: ${{ inputs.push }}
        env:
          DESTINATION: ${{ steps.run-info.outputs.image-with-tag }}
        run: |
          DESTINATION_DIGEST="$(crane digest "${DESTINATION}" || true)"
          (
            echo "DESTINATION_DIGEST"
            echo "${DESTINATION_DIGEST}"
          ) | column -t
          echo "destination=${DESTINATION_DIGEST}" >> $GITHUB_OUTPUT
      - name: Sign image
        if: ${{ inputs.push }}
        env:
          COSIGN_YES: "true"
        run: |
          cosign sign ${{ steps.run-info.outputs.image-with-tag }}@${{ steps.get-digests.outputs.destination }} -y --recursive
      - uses: anchore/sbom-action@4d571ad1038a9cc29d676154ef265ab8f9027042 # v0.14.2
        if: ${{ inputs.push }}
        with:
          image: ${{ steps.run-info.outputs.image-with-tag }}@${{ steps.get-digests.outputs.destination }}
          artifact-name: sbom-spdx.json
          output-file: /tmp/sbom-spdx.json
      - name: publish sbom blob as blob
        if: ${{ inputs.push }}
        env:
          COSIGN_YES: "true"
        run: |
          cosign attest --predicate /tmp/sbom-spdx.json ${{ steps.run-info.outputs.image-with-tag }}@${{ steps.get-digests.outputs.destination }} --recursive
      - name: image
        if: ${{ inputs.push }}
        id: image
        run: |
          echo "image=${{ steps.run-info.outputs.image-with-tag }}@${{ steps.get-digests.outputs.destination }}" >> $GITHUB_OUTPUT
      - name: image result
        if: ${{ inputs.push }}
        id: result
        run: |
          echo "Build, pushed and signed: ${{ steps.image.outputs.image }}"
