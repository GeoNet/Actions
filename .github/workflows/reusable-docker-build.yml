name: Reusable Docker build
env:
  VERSION_CRANE: v0.16.1
on:
  workflow_call:
    inputs:
      context:
        required: true
        type: string
        default: .
        description: |
          path to image source.
      imageName:
        required: true
        type: string
        description: |
          the short name for image builds.
          e.g: nginx
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      dockerfile:
        required: true
        type: string
        default: ./Dockerfile
        description: |
          path to the image dockerfile.
      tags:
        required: false
        type: string
        default: latest
        description: |
          a comma separated list of tags to image tags.
          e.g:
            - latest,20230607,git-deadb33f
            - cooltag,v2.0.2
            - latest
      buildArgs:
        required: false
        type: string
        description: |
          a multi-line separated list of build args.
          e.g: |
              THING1=a
              THING2=b
      platforms:
        required: false
        type: string
        default: "linux/amd64"
        description: |
          comma-separated list of platforms to build with.
          e.g: linux/amd64,linux/arm64
      push:
        required: false
        type: boolean
        default: false
        description: |
          set to true to push an image to a registry. When set to false, it will build and exit
      aws-region:
        type: string
        default: ap-southeast-2
        required: false
        description: |
          the AWS region to use; e.g ap-southeast-2
      aws-role-arn-to-assume:
        type: string
        required: false
        description: |
          an AWS role ARN to assume.
          e.g: arn:aws:iam::ACCOUNT_ID:role/github-actions-ROLE_NAME
      aws-role-duration-seconds:
        type: string
        default: "3600"
        required: false
        description: |
          the amount of seconds to hold a session open for.
      aws-role-session-name:
        type: string
        required: false
        description: |
          the name of the session to use for AssumeRole(WithWebIdentity).
      setup:
        type: string
        required: false
        description: |
          shell commands to setup the build environment
    outputs:
      image:
        value: ${{ jobs.build.outputs.image }}
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      image: ${{ steps.image.outputs.image }}
    steps:
      - if: ${{ startsWith(github.repository, 'GeoNet/') == false }}
        run: |
          exit 1
      - uses: GeoNet/yq@bbe305500687a5fe8498d74883c17f0f06431ac4 # master
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version: stable
          check-latest: true
      - uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 # v3.1.1
      - uses: GeoNet/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # main
        with:
          version: ${{ env.VERSION_CRANE }}
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@2b82ce82d56a2a04d2637cd93a637ae1b359c0a7 # v2.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4c0219f9ac95b02789c1075625400b2acbff50b1 # v2.9.1
      - name: setup
        run: |
          eval '${{ inputs.setup }}'
      - id: run-info
        name: collect job run info
        env:
          REGISTRY_OVERRIDE: ${{ inputs.registryOverride }}
          GHCR_DOCKER_REPO: ghcr.io/${{ github.repository }}
          IMAGE_NAME: ${{ inputs.imageName }}
          TAGS: ${{ inputs.tags }}
        run: |
          TAGS="${TAGS:-latest}"
          REGISTRY="${GHCR_DOCKER_REPO,,}"
          [ -z "$REGISTRY_OVERRIDE" ] || REGISTRY="$REGISTRY_OVERRIDE"
          IMAGES_WITH_TAGS=""
          for TAG in $(echo $TAGS | tr ',' ' '); do
            NEW_TAG="$REGISTRY/$IMAGE_NAME:$TAG"
            if [ -n "$IMAGES_WITH_TAGS" ]; then
              IMAGES_WITH_TAGS="$NEW_TAG,$IMAGES_WITH_TAGS"
            else
              IMAGES_WITH_TAGS="$NEW_TAG"
            fi
          done
          echo "image=$REGISTRY/$IMAGE_NAME" >> $GITHUB_OUTPUT
          echo "images-with-tags=$IMAGES_WITH_TAGS" >> $GITHUB_OUTPUT
      - name: get session name
        id: get-session-name
        if: ${{ inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && inputs.registryOverride != '' }}
        env:
          REPO: ${{ github.repository }}
          AWS_ROLE_SESSION_NAME: ${{ inputs.aws-role-session-name }}
        run: |
          SESSION_NAME="$(echo "github-actions-$REPO" | sed 's,/,--,g' | tr '[[:upper:]]' '[[:lower:]]')"
          if [ -n "$AWS_ROLE_SESSION_NAME" ]; then
            SESSION_NAME="$AWS_ROLE_SESSION_NAME"
          fi
          echo "session-name=$SESSION_NAME" >> $GITHUB_OUTPUT
      - name: Login to quay.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        env:
          quay-robot-token: ${{ secrets.QUAY_ROBOT_TOKEN }}
          quay-username: ${{ secrets.QUAY_USERNAME }}
        if: ${{ env.quay-robot-token != null && env.quay-username != null }}
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_ROBOT_TOKEN }}
      - name: Login to ghcr.io
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS Credentials
        if: ${{ inputs.push == true && inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && steps.get-session-name.outputs.session-name != '' && inputs.registryOverride != '' }}
        uses: aws-actions/configure-aws-credentials@2b225b5275d2d624ea40ffd55ecd0bae1d98845f # v2.0.0
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-arn-to-assume }}
          role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
          role-session-name: ${{ steps.get-session-name.outputs.session-name }}
      - name: login to ECR
        if: ${{ inputs.push == true && inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && steps.get-session-name.outputs.session-name != '' }}
        run: |
          aws ecr get-login-password --region ${{ inputs.aws-region }} | crane auth login ${{ inputs.registryOverride }} -u AWS --password-stdin
      - name: Build and push
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        id: build
        with:
          push: ${{ inputs.push }}
          tags: ${{ steps.run-info.outputs.images-with-tags }}
          context: ${{ inputs.context }}
          platforms: ${{ inputs.platforms }}
          file: ${{ inputs.dockerfile }}
          build-args: ${{ inputs.buildArgs }}
          labels: |
            org.opencontainers.image.name=${{ inputs.imageName }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
      - name: get-digests
        id: get-digests
        if: ${{ inputs.push == true }}
        env:
          DESTINATION: ${{ steps.run-info.outputs.image }}@${{ steps.build.outputs.digest }}
        run: |
          DESTINATION_DIGEST="$(crane digest "${DESTINATION}" || true)"
          (
            echo "DESTINATION_DIGEST"
            echo "${DESTINATION_DIGEST}"
          ) | column -t
          echo "destination=${DESTINATION_DIGEST}" >> $GITHUB_OUTPUT
      - name: Sign image
        if: ${{ inputs.push == true }}
        env:
          COSIGN_YES: "true"
        run: |
          cosign sign ${{ steps.run-info.outputs.image }}@${{ steps.get-digests.outputs.destination }} -y --recursive
      - uses: anchore/sbom-action@78fc58e266e87a38d4194b2137a3d4e9bcaf7ca1 # v0.14.3
        if: ${{ inputs.push == true }}
        with:
          image: ${{ steps.run-info.outputs.image }}@${{ steps.get-digests.outputs.destination }}
          artifact-name: sbom-spdx.json
          output-file: /tmp/sbom-spdx.json
      - name: publish sbom blob as blob
        if: ${{ inputs.push == true }}
        env:
          COSIGN_YES: "true"
        run: |
          cosign attest --predicate /tmp/sbom-spdx.json ${{ steps.run-info.outputs.image }}@${{ steps.get-digests.outputs.destination }} --recursive
      - name: image
        if: ${{ inputs.push == true }}
        id: image
        run: |
          echo "image=${{ steps.run-info.outputs.image }}@${{ steps.get-digests.outputs.destination }}" >> $GITHUB_OUTPUT
      - name: image result
        if: ${{ inputs.push == true }}
        id: result
        run: |
          echo -e "Built, pushed and signed:\n\n$(echo ${{ steps.image.outputs.image }} | sed 's/,/\n/g' | sed 's/^/- /g')"
