name: reusable go container apps
on:
  workflow_call:
    inputs:
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      registryGhcrUsernameOverride:
        required: false
        type: string
        description: |
          the GitHub username to use for ghcr auth override.
      paths:
        required: false
        type: string
        description: |
          the Go entrypoint paths for applications, where there they have `package main`
          e.g: ./cmd/thing1 ./cmd/thing2
      imagePromotionConfigLiteral:
        required: false
        type: string
        description: |
          in-line configuration for image promotion.

          e.g:
          - name: coolest-serverless-app
            dmap:
              "sha256:8246383b7fd0ca87cbac28e6b99d84cda5487f0e80d2c93f16c2f42366160a40": ["v1", "v2"]
          - name: mission-critical-service
            dmap:
              "sha256:a479f33cb7f5fe7d5149de44848bcbc38d5f107d7b47a962df7749259eef49eb": ["v1"]
          - name: webthingy
            dmap:
              "sha256:efdb4ab576f4028e8319733890af8e7c49eed7f43bfe33e078052a1d0763ef89": ["v1"]
      imagePromotionEnabled:
        required: false
        default: true
        type: boolean
        description: |
          configures whether image promtion is enabled.
      imagePromotionConfigPath:
        required: false
        type: string
        default: images/config.yaml
        description: |
          the local relative path to a promotion config.
          e.g: ./images/config.yaml

          the format of the file must be

          type Image struct {
            Name string              `json:"name"`
            Dmap map[string][]string `json:"dmap"`
          }

          example like

          - name: coolest-serverless-app
            dmap:
              "sha256:8246383b7fd0ca87cbac28e6b99d84cda5487f0e80d2c93f16c2f42366160a40": ["v1", "v2"]
          - name: mission-critical-service
            dmap:
              "sha256:a479f33cb7f5fe7d5149de44848bcbc38d5f107d7b47a962df7749259eef49eb": ["v1"]
          - name: webthingy
            dmap:
              "sha256:efdb4ab576f4028e8319733890af8e7c49eed7f43bfe33e078052a1d0763ef89": ["v1"]
      updateGoVersionAutoMerge:
        type: boolean
        default: false
        required: false
        description: |
          specifies whether to auto merge PRs for Go version updates to go.mod files
      containerScanningEnabled:
        type: boolean
        default: false
        required: false
        description: |
          specifies whether to enable container scanning for each image built
      containerBuildEnabled:
        type: boolean
        default: ${{ github.ref == 'refs/heads/main' || contains(fromJSON('["workflow_call", "release"]'), github.event_name) }}
        required: false
        description: |
          specifies whether to enable container scanning for each image built
      push:
        required: false
        default: ${{ github.ref == 'refs/heads/main' }}
        type: boolean
        description: |
          set to true to push an image to a registry. When set to false, it will build and exit
      testSetup:
        type: string
        required: false
        description: |
          shell commands to setup the test environment
      aws-region:
        type: string
        default: ap-southeast-2
        required: false
        description: |
          the AWS region to use; e.g ap-southeast-2
      aws-role-arn-to-assume:
        type: string
        required: false
        description: |
          an AWS role ARN to assume.
          e.g: arn:aws:iam::ACCOUNT_ID:role/github-actions-ROLE_NAME
      aws-role-duration-seconds:
        type: string
        default: "3600"
        required: false
        description: |
          the amount of seconds to hold a session open for.
      aws-role-session-name:
        type: string
        required: false
        description: |
          the name of the session to use for AssumeRole(WithWebIdentity).
      goTestExtraArgs:
        required: false
        type: string
        description: |
          extra args to pass `go test`
    secrets:
      GH_CI_USER_TOKEN:
        required: false
    outputs:
      images:
        value: ${{ jobs.build.outputs.images }}
jobs:
  go-build:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-go-build-smoke-test.yml@main
    with:
      paths: ${{ inputs.paths }}
  build:
    if: ${{ contains(fromJSON('["workflow_call", "push", "release"]'), github.event_name) && inputs.containerBuildEnabled && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-ko-build.yml@main
    secrets: inherit
    with:
      registryOverride: ${{ inputs.registryOverride }}
      paths: ${{ inputs.paths }}
      aws-region: ${{ inputs.aws-region }}
      aws-role-arn-to-assume: ${{ inputs.aws-role-arn-to-assume }}
      aws-role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
      aws-role-session-name: ${{ inputs.aws-role-session-name }}
      registryGhcrUsernameOverride: ${{ inputs.registryGhcrUsernameOverride }}
  scan:
    if: ${{ contains(fromJSON('["workflow_call", "push", "release"]'), github.event_name) && inputs.containerScanningEnabled && startsWith(github.repository, 'GeoNet/') != false }}
    needs: build
    uses: GeoNet/Actions/.github/workflows/reusable-container-image-scan.yml@main
    with:
      imageRefs: ${{ needs.build.outputs.images }}
  gofmt:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-gofmt.yml@main
  golangci-lint:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-golangci-lint.yml@main
  go-test:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-go-test.yml@main
    with:
      setup: ${{ inputs.testSetup }}
      extraArgs: ${{ inputs.goTestExtraArgs }}
  go-vet:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-go-vet.yml@main
  govulncheck:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-govulncheck.yml@main
  goimports:
    if: ${{ contains(fromJSON('["workflow_call", "push", "pull_request"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-goimports.yml@main
  image-promotion-in-config-on-release:
    needs: build
    if: ${{ contains(fromJSON('["workflow_call", "release"]'), github.event_name) && inputs.imagePromotionConfigLiteral == null && startsWith(github.repository, 'GeoNet/') != false && inputs.imagePromotionEnabled == true }}
    uses: GeoNet/Actions/.github/workflows/reusable-container-image-promotion.yml@main
    secrets: inherit
    with:
      configPath: ${{ inputs.imagePromotionConfigPath }}
      imageRefs: ${{ needs.build.outputs.images }}
      aws-region: ${{ inputs.aws-region }}
      aws-role-arn-to-assume: ${{ inputs.aws-role-arn-to-assume }}
      aws-role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
      aws-role-session-name: ${{ inputs.aws-role-session-name }}
      registryGhcrUsernameOverride: ${{ inputs.registryGhcrUsernameOverride }}
  image-promotion:
    if: ${{ contains(fromJSON('["workflow_call", "push", "schedule"]'), github.event_name) && github.ref == 'refs/heads/main' && startsWith(github.repository, 'GeoNet/') != false && inputs.imagePromotionEnabled == true }}
    uses: GeoNet/Actions/.github/workflows/reusable-container-image-promotion.yml@main
    secrets: inherit
    with:
      registryOverride: ${{ inputs.registryOverride }}
      configPath: ${{ inputs.imagePromotionConfigPath }}
      configLiteral: ${{ inputs.imagePromotionConfigLiteral }}
      aws-region: ${{ inputs.aws-region }}
      aws-role-arn-to-assume: ${{ inputs.aws-role-arn-to-assume }}
      aws-role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
      aws-role-session-name: ${{ inputs.aws-role-session-name }}
      registryGhcrUsernameOverride: ${{ inputs.registryGhcrUsernameOverride }}
  update-go-version:
    if: ${{ contains(fromJSON('["workflow_call", "schedule"]'), github.event_name) && startsWith(github.repository, 'GeoNet/') != false }}
    uses: GeoNet/Actions/.github/workflows/reusable-update-go-version.yml@main
    with:
      autoMerge: ${{ inputs.updateGoVersionAutoMerge }}
