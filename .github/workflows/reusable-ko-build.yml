name: Reusable Ko build
env:
  VERSION_CRANE: v0.16.1
  KO_DEFAULTBASEIMAGE: ghcr.io/geonet/base-images/static:latest
on:
  workflow_call:
    inputs:
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      registryGhcrUsernameOverride:
        required: false
        type: string
        description: |
          the GitHub username to use for ghcr auth override.
      paths:
        required: false
        type: string
        description: |
          the Go entrypoint paths for applications, where there they have `package main`
          e.g: ./cmd/thing1 ./cmd/thing2
      push:
        required: false
        default: ${{ github.ref == 'refs/heads/main' }}
        type: boolean
        description: |
          set to true to push an image to a registry. When set to false, it will build and exit
      aws-region:
        type: string
        default: ap-southeast-2
        required: false
        description: |
          the AWS region to use; e.g ap-southeast-2
      aws-role-arn-to-assume:
        type: string
        required: false
        description: |
          an AWS role ARN to assume.
          e.g: arn:aws:iam::ACCOUNT_ID:role/github-actions-ROLE_NAME
      aws-role-duration-seconds:
        type: string
        default: "3600"
        required: false
        description: |
          the amount of seconds to hold a session open for.
      aws-role-session-name:
        type: string
        required: false
        description: |
          the name of the session to use for AssumeRole(WithWebIdentity).
      sign:
        type: boolean
        required: false
        default: false
        description: |
          sign image and attestations
      setup:
        required: false
        type: string
        description: |
          shell commands to setup the build environment
    secrets:
      GH_CI_USER_TOKEN:
        required: false
    outputs:
      images:
        value: ${{ jobs.build.outputs.images }}
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      images: ${{ steps.build.outputs.images }}
    steps:
      - if: ${{ startsWith(github.repository, 'GeoNet/') == false }}
        run: |
          exit 1
      - uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3.6.0
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: sigstore/cosign-installer@11086d25041f77fe8fe7b9ea4e48e3b9192b8f19 # v3.1.2
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          if [ -n "${{ inputs.registryOverride }}" ]; then
            KO_DOCKER_REPO="${{ inputs.registryOverride }}"
          fi
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
          if [ -n "${{ inputs.paths }}" ]; then
            echo "paths=$(echo '${{ inputs.paths }}' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          else
            PATHS="$(grep -r 'package main' | sort | cut -d ':' -f1 | grep '.go$' | xargs -n 1 dirname | sort | uniq | grep -v vendor | xargs -i echo './{}' | xargs)"
            echo "paths="$PATHS"" >> $GITHUB_OUTPUT
          fi
      - uses: actions/setup-go@93397bea11091df50f3d7e59dc26a7711a8bcfbe # v4.1.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
          check-latest: true
      - uses: GeoNet/setup-crane@00c9e93efa4e1138c9a7a5c594acd6c75a2fbf0c # main
        with:
          version: ${{ env.VERSION_CRANE }}
      - uses: GeoNet/setup-ko@f3c6980bb213dc8bb4856f52598a9230d910d06f # main
      - name: setup
        run: |
          eval '${{ inputs.setup }}'
      - name: get session name
        id: get-session-name
        if: ${{ inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && inputs.registryOverride != '' }}
        env:
          REPO: ${{ github.repository }}
          AWS_ROLE_SESSION_NAME: ${{ inputs.aws-role-session-name }}
        run: |
          SESSION_NAME="$(echo "github-actions-$REPO" | sed 's,/,--,g' | tr '[[:upper:]]' '[[:lower:]]')"
          if [ -n "$AWS_ROLE_SESSION_NAME" ]; then
            SESSION_NAME="$AWS_ROLE_SESSION_NAME"
          fi
          echo "session-name=$SESSION_NAME" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        if: ${{ inputs.push == true && inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && steps.get-session-name.outputs.session-name != '' && inputs.registryOverride != '' }}
        uses: aws-actions/configure-aws-credentials@2b225b5275d2d624ea40ffd55ecd0bae1d98845f # v2.0.0
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.aws-role-arn-to-assume }}
          role-duration-seconds: ${{ inputs.aws-role-duration-seconds }}
          role-session-name: ${{ steps.get-session-name.outputs.session-name }}
      - name: login to ECR
        if: ${{ inputs.push == true && inputs.aws-region != '' && inputs.aws-role-arn-to-assume != '' && inputs.aws-role-duration-seconds != '' && steps.get-session-name.outputs.session-name != '' }}
        run: |
          aws ecr get-login-password --region ${{ inputs.aws-region }} | crane auth login ${{ inputs.registryOverride }} -u AWS --password-stdin
      - name: override login to ghcr
        env:
          registryGhcrUsernameOverride: ${{ inputs.registryGhcrUsernameOverride }}
          registryGhcrPasswordOverride: ${{ secrets.GH_CI_USER_TOKEN }}
        if: ${{ inputs.push == true && env.registryGhcrUsernameOverride != '' && env.registryGhcrPasswordOverride != '' }}
        run: |
          echo "${{ env.registryGhcrPasswordOverride }}" | crane auth login ghcr.io -u ${{ env.registryGhcrUsernameOverride }} --password-stdin
      - id: build
        name: build
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
          IMAGES_PATH: ${{ steps.run-info.outputs.paths }}
          PUSH: ${{ inputs.push }}
        run: |
          echo "NOTICE: using default base image $KO_DEFAULTBASEIMAGE"
          IMAGES="$(ko build --push=$PUSH --base-import-paths $IMAGES_PATH)"
          echo "images=$(echo $IMAGES | tr ' ' ',')" >> $GITHUB_OUTPUT
      - id: sign-images-and-attest-sbom
        if: ${{ inputs.push == true && inputs.sign == true }}
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.build.outputs.images }}
        run: |
          for IMAGE in $(echo ${{ steps.build.outputs.images }} | tr ',' ' '); do
            cosign sign $IMAGE -y --recursive
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y --recursive
          done
      - name: image result
        if: ${{ inputs.push }}
        id: result
        run: |
          echo -e "Built, pushed and signed:\n\n$(echo ${{ steps.build.outputs.images }} | sed 's/,/\n/g' | sed 's/^/- /g')"
